Subject: [PATCH] WEB_CONSOLE_MSQ_PATCH
---
Index: web-console/src/utils/download-query-detail-archive.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web-console/src/utils/download-query-detail-archive.ts b/web-console/src/utils/download-query-detail-archive.ts
--- a/web-console/src/utils/download-query-detail-archive.ts	(revision b274723928315db73517c91a35c040f8ce559576)
+++ b/web-console/src/utils/download-query-detail-archive.ts	(date 1742212083646)
@@ -19,6 +19,7 @@
 import * as JSONBig from 'json-bigint-native';

 import type {
+  AsyncNativeStatusResponse,
   AsyncStatusResponse,
   MsqTaskPayloadResponse,
   MsqTaskReportResponse,
@@ -34,6 +35,7 @@
   reports?: MsqTaskReportResponse;
   payload?: MsqTaskPayloadResponse;
   statementsStatus?: AsyncStatusResponse;
+  nativeStatementsStatus?: AsyncNativeStatusResponse;
   serverStatus?: any;
 }

@@ -61,6 +63,12 @@
       await Api.instance.get(`/druid/v2/sql/statements/${encodedId}`)
     ).data;
   } catch {}
+
+  try {
+    profile.nativeStatementsStatus = (
+      await Api.instance.get(`/druid/v2/native/statements/${encodedId}`)
+    ).data;
+  } catch {}

   try {
     profile.serverStatus = (await Api.instance.get(`/status`)).data;
Index: web-console/src/helpers/execution/sql-task-execution.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web-console/src/helpers/execution/sql-task-execution.ts b/web-console/src/helpers/execution/sql-task-execution.ts
--- a/web-console/src/helpers/execution/sql-task-execution.ts	(revision b274723928315db73517c91a35c040f8ce559576)
+++ b/web-console/src/helpers/execution/sql-task-execution.ts	(date 1742212083634)
@@ -19,7 +19,12 @@
 import { QueryResult } from '@druid-toolkit/query';
 import type { AxiosResponse, CancelToken } from 'axios';

-import type { AsyncStatusResponse, MsqTaskPayloadResponse, QueryContext } from '../../druid-models';
+import type {
+  AsyncNativeStatusResponse,
+  AsyncStatusResponse,
+  MsqTaskPayloadResponse,
+  QueryContext
+} from '../../druid-models';
 import { Execution } from '../../druid-models';
 import { Api } from '../../singletons';
 import { deepGet, DruidError, IntermediateQueryState, QueryManager } from '../../utils';
@@ -166,9 +171,10 @@
   const encodedId = Api.encodePath(id);

   let execution: Execution | undefined;
+  let taskReport: undefined;
+  let taskPayload = taskPayloadOverride;

   if (Execution.USE_TASK_REPORTS) {
-    let taskReport: any;
     try {
       taskReport = (
         await Api.instance.get(`/druid/indexer/v1/task/${encodedId}/reports`, {
@@ -192,18 +198,6 @@
     }
   }

-  if (!execution) {
-    const statusResp = await Api.instance.get<AsyncStatusResponse>(
-      `/druid/v2/sql/statements/${encodedId}?detail=true`,
-      {
-        cancelToken,
-      },
-    );
-
-    execution = Execution.fromAsyncStatus(statusResp.data);
-  }
-
-  let taskPayload = taskPayloadOverride;
   if (Execution.USE_TASK_PAYLOAD && !taskPayload) {
     try {
       taskPayload = (
@@ -215,6 +209,31 @@
       if (Api.isNetworkError(e)) throw e;
     }
   }
+
+  const isNative =
+    (taskReport && deepGet(taskReport, 'type') === 'multiStageQuery' && deepGet(taskReport, 'multiStageQuery.isNative')) ||
+    (taskPayload && deepGet(taskPayload, 'payload.type') === 'native_query_controller');
+
+  if (!execution) {
+
+    const statusResp = isNative
+    ? await Api.instance.get<AsyncNativeStatusResponse>(
+      `/druid/v2/native/statements/${encodedId}?detail=true`,
+      {
+        cancelToken,
+      },
+    )
+    :await Api.instance.get<AsyncStatusResponse>(
+          `/druid/v2/sql/statements/${encodedId}?detail=true`,
+          {
+            cancelToken,
+          },
+        )
+    ;
+
+    execution = Execution.fromAsyncStatus(statusResp.data);
+  }
+
   if (taskPayload) {
     execution = execution.updateWithTaskPayload(taskPayload);
   }
@@ -222,12 +241,20 @@
   // Still have to pull the destination page info from the async status, do this in a best effort way since the statements API may have permission errors
   if (execution.status === 'SUCCESS' && !execution.destinationPages) {
     try {
-      const statusResp = await Api.instance.get<AsyncStatusResponse>(
-        `/druid/v2/sql/statements/${encodedId}`,
-        {
-          cancelToken,
-        },
-      );
+      const statusResp = isNative
+        ? await Api.instance.get<AsyncNativeStatusResponse>(
+          `/druid/v2/native/statements/${encodedId}`,
+          {
+            cancelToken,
+          },
+        )
+        :await Api.instance.get<AsyncStatusResponse>(
+          `/druid/v2/sql/statements/${encodedId}`,
+          {
+            cancelToken,
+          },
+        )
+      ;

       execution = execution.updateWithAsyncStatus(statusResp.data);
     } catch (e) {
Index: web-console/src/druid-models/execution/execution.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web-console/src/druid-models/execution/execution.ts b/web-console/src/druid-models/execution/execution.ts
--- a/web-console/src/druid-models/execution/execution.ts	(revision b274723928315db73517c91a35c040f8ce559576)
+++ b/web-console/src/druid-models/execution/execution.ts	(date 1742225520024)
@@ -28,7 +28,7 @@
   oneOf,
   pluralIfNeeded,
 } from '../../utils';
-import type { AsyncState, AsyncStatusResponse } from '../async-query/async-query';
+import type {AsyncState, BaseAsyncStatusResponse} from '../async-query/async-query';
 import type { DruidEngine } from '../druid-engine/druid-engine';
 import { validDruidEngine } from '../druid-engine/druid-engine';
 import type { QueryContext } from '../query-context/query-context';
@@ -231,7 +231,7 @@
   }

   static fromAsyncStatus(
-    asyncSubmitResult: AsyncStatusResponse,
+    asyncSubmitResult: BaseAsyncStatusResponse,
     sqlQuery?: string,
     queryContext?: QueryContext,
   ): Execution {
@@ -239,8 +239,17 @@

     let queryResult: QueryResult | undefined;
     if (schema && result?.sampleRecords) {
+      const normalizedSchema: { name: string; type: string | undefined; nativeType: string }[] =
+        schema && !Array.isArray(schema)
+          ? Object.entries(schema).map(([name, nativeType]) => ({
+            name,
+            type: undefined,
+            nativeType
+          }))
+          : (schema as { name: string; type: string; nativeType: string }[]) ?? [];
+
       queryResult = new QueryResult({
-        header: schema.map(
+        header: normalizedSchema.map(
           s => new Column({ name: s.name, sqlType: s.type, nativeType: s.nativeType }),
         ),
         rows: result.sampleRecords,
@@ -518,7 +527,7 @@
     return ret;
   }

-  public updateWithAsyncStatus(statusPayload: AsyncStatusResponse): Execution {
+  public updateWithAsyncStatus(statusPayload: BaseAsyncStatusResponse): Execution {
     const value = this.valueOf();

     const { pages, numTotalRows } = statusPayload.result || {};
Index: web-console/src/druid-models/async-query/async-query.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web-console/src/druid-models/async-query/async-query.ts b/web-console/src/druid-models/async-query/async-query.ts
--- a/web-console/src/druid-models/async-query/async-query.ts	(revision b274723928315db73517c91a35c040f8ce559576)
+++ b/web-console/src/druid-models/async-query/async-query.ts	(date 1742218300909)
@@ -22,12 +22,12 @@

 export type AsyncState = 'ACCEPTED' | 'RUNNING' | 'SUCCESS' | 'FAILED';

-export interface AsyncStatusResponse {
+export interface BaseAsyncStatusResponse {
   queryId: string;
   state: AsyncState;
   createdAt: string;
   durationMs: number;
-  schema?: { name: string; type: string; nativeType: string }[];
+  schema?: { name: string; type: string; nativeType: string }[] | Record<string, string>;
   result?: {
     dataSource: string;
     sampleRecords?: any[][];
@@ -44,3 +44,11 @@
   errorDetails?: ErrorResponse;
   warnings?: MsqTaskErrorReport[];
 }
+
+export interface AsyncStatusResponse extends BaseAsyncStatusResponse {
+  schema?: { name: string; type: string; nativeType: string }[];
+}
+
+export interface AsyncNativeStatusResponse extends BaseAsyncStatusResponse {
+  schema?: Record<string, string>
+}
Index: web-console/src/views/tasks-view/tasks-view.tsx
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web-console/src/views/tasks-view/tasks-view.tsx b/web-console/src/views/tasks-view/tasks-view.tsx
--- a/web-console/src/views/tasks-view/tasks-view.tsx	(revision b274723928315db73517c91a35c040f8ce559576)
+++ b/web-console/src/views/tasks-view/tasks-view.tsx	(date 1741947174490)
@@ -332,7 +332,7 @@
   }

   private onTaskDetail(task: TaskQueryResultRow) {
-    if (task.type === 'query_controller') {
+    if (task.type === 'query_controller' || task.type === 'native_query_controller') {
       this.setState({
         executionDialogOpen: task.task_id,
       });