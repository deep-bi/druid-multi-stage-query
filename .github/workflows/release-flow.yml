name: Release flow
on:
  workflow_dispatch:
    inputs:
      upstream_ref:
        description: "Druid ref for web-console (e.g. 33.0.0 or druid-33.0.0)"
        required: true
      publish:
        description: "Publish as real release (not draft)"
        type: boolean
        default: false
permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate ref for mode
        run: |
          set -euo pipefail
          echo "REF: type=$GITHUB_REF_TYPE name=$GITHUB_REF_NAME publish=${{ inputs.publish }}"
          if [ "${{ inputs.publish }}" = "true" ]; then
            if [[ "$GITHUB_REF_TYPE" = "branch" && "$GITHUB_REF_NAME" =~ ^release/ ]]; then
              exit 0
            else
              echo "::error::Publishing requires run from a release/* branch"; exit 1
            fi
          else
            if [[ "$GITHUB_REF_TYPE" = "branch" && "$GITHUB_REF_NAME" =~ -rc$ ]]; then
              exit 0
            else
              echo "::error::Draft mode must run from a *-rc branch"; exit 1
            fi
          fi

      - name: Setup JDK 11
        uses: actions/setup-java@v4
        with: { distribution: temurin, java-version: "11" }

      - name: Build MSQ + tests
        run: mvn clean test -B

      - name: Package MSQ jars
        run: |
          mkdir -p dist
          mvn -q -DskipTests package
          find . -path '*/target/*.jar' -not -path './external-druid/*' -exec cp -n {} dist/ \; || true

      - name: Normalize upstream ref
        id: ref
        run: |
          REF="${{ inputs.upstream_ref }}"
          [[ "$REF" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-rc[0-9]+)?$ ]] && REF="druid-$REF"
          echo "ref=$REF" >> "$GITHUB_OUTPUT"

      - name: Sparse checkout apache/druid@ref
        run: |
          set -e
          rm -rf external-druid
          git init external-druid
          git -C external-druid remote add origin https://github.com/apache/druid.git
          git -C external-druid config core.sparseCheckout true
          {
            echo "web-console/"
            echo "licenses/"
            echo "codestyle/"
            echo "docs/"
          } > external-druid/.git/info/sparse-checkout
          git -C external-druid fetch --depth 1 origin "${{ steps.ref.outputs.ref }}" || git -C external-druid fetch --depth 1 origin "refs/tags/${{ steps.ref.outputs.ref }}"
          git -C external-druid checkout --detach FETCH_HEAD
          [ -d external-druid/codestyle ] && mv external-druid/codestyle external-druid/web-console/
          [ -d external-druid/licenses ] && mv external-druid/licenses external-druid/web-console/

      - name: Apply web-console patch
        shell: bash
        run: |
          set -euo pipefail
          PATCH="$(git rev-parse --show-toplevel)/.github/patches/web-console.patch"
          [ -s "$PATCH" ] || { echo "::error ::patch missing/empty"; exit 1; }
          echo "Applying $PATCH ..."
          git -C external-druid apply --check "$PATCH"
          git -C external-druid apply --stat "$PATCH"
          git -C external-druid apply --reject --whitespace=nowarn "$PATCH"
          REJ=$(find external-druid -name "*.rej" | wc -l | tr -d ' ')
          if [ "$REJ" -gt 0 ]; then
            echo "::error title=Patch rejects::${REJ} hunk(s) failed"
            find external-druid -name "*.rej" -o -name "*.orig" -print
            exit 1
          fi
          echo "Patch applied cleanly."

      - name: Setup Node for web-console
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Web-console unit tests
        run: |
          set -e
          cd external-druid/web-console
          npm ci --no-audit --no-fund
          script/create-sql-docs.mjs
          npx jest --ci

      - name: Build web-console jar
        run: |
          set -e
          ( cd external-druid/web-console && mvn -q -Dpmd.skip=true -DskipTests clean package )
          cp external-druid/web-console/target/*.jar dist/

      - name: Compute release metadata
        id: relmeta
        shell: bash
        run: |
          VER="${{ inputs.upstream_ref }}"
          if [ "${{ inputs.publish }}" = "true" ]; then
            echo "tag=release-$VER" >> $GITHUB_OUTPUT
            echo "name=Release $VER" >> $GITHUB_OUTPUT
            echo "draft=false" >> $GITHUB_OUTPUT
          else
            echo "tag=draft-${{ inputs.upstream_ref }}-${{ github.run_number }}" >> $GITHUB_OUTPUT
            echo "name=Draft Release $VER (run ${{ github.run_number }})" >> $GITHUB_OUTPUT
            echo "draft=true" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.relmeta.outputs.tag }}
          name: ${{ steps.relmeta.outputs.name }}
          draft: ${{ steps.relmeta.outputs.draft }}
          target_commitish: ${{ github.sha }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Zip artifacts
        run: |
          (cd dist && zip -r ../artifacts.zip .)

      - name: Upload artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts.zip
          asset_name: artifacts-${{ inputs.upstream_ref }}.zip
          asset_content_type: application/zip
